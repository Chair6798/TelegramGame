import telebot as tb
from telebot import types
import random
import threading
from collections import defaultdict
from data import botkey

# WARN! YOU NEED TO CREATE FILE data.py WITH VARIABLE botkey

bot = tb.TeleBot(botkey)

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏–π
situations = [
    {
        "id": 1,
        "description": "–¢—ã –ø—Ä–æ—Å–ø–∞–ª –∏ –æ–ø–∞–∑–¥—ã–≤–∞–µ—à—å –≤ —à–∫–æ–ª—É, –∞ —Ä–æ–¥–∏—Ç–µ–ª–∏ —É–∂–µ —É—à–ª–∏ –Ω–∞ —Ä–∞–±–æ—Ç—É."
    },
    {
        "id": 2,
        "description": "–£—á–∏—Ç–µ–ª—å —Å–ª—É—á–∞–π–Ω–æ –Ω–∞–∑–≤–∞–ª —Ç–µ–±—è —á—É–∂–∏–º –∏–º–µ–Ω–µ–º, –∏ –≤–µ—Å—å –∫–ª–∞—Å—Å —Ä–∂—ë—Ç."
    },
    {
        "id": 3,
        "description": "–¢—ã –∑–∞–±—ã–ª —Å–¥–µ–ª–∞—Ç—å –¥–æ–º–∞—à–∫—É, –∞ —Å–µ–≥–æ–¥–Ω—è –∫–∞–∫ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä—è—é—Ç."
    },
    {
        "id": 4,
        "description": "–¢—ã –Ω–∞—à–µ–ª(–∞) —Å—Ç–∞—Ä—ã–π –¥–Ω–µ–≤–Ω–∏–∫ –∏ –Ω–µ –º–æ–∂–µ—à—å –ø–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —ç—Ç–æ –ø–∏—Å–∞–ª(–∞)."
    },
    {
        "id": 5,
        "description": "–¢—ã –Ω–∞–ø–∏—Å–∞–ª(–∞) –¥—Ä—É–≥—É '–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?', –∞ –æ–Ω –ø—Ä–æ—á–∏—Ç–∞–ª –∏ –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª."
    },
    {
        "id": 6,
        "description": "–¢—ã –ø—ã—Ç–∞–µ—à—å—Å—è –æ–±—ä—è—Å–Ω–∏—Ç—å –±–∞–±—É—à–∫–µ, –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –≤ WhatsApp."
    },
    {
        "id": 7,
        "description": "–¢—ã —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –º–µ–º –ø—Ä–æ —É—á–∏—Ç–µ–ª—è –≤ –æ–±—â–∏–π —á–∞—Ç –∫–ª–∞—Å—Å–∞."
    },
    {
        "id": 8,
        "description": "–¢—ã –≤–µ—Å—å –≤–µ—á–µ—Ä —Ä–µ—à–∞–ª(–∞) —Å–ª–æ–∂–Ω—É—é –∑–∞–¥–∞—á—É, –∞ –æ—Ç–≤–µ—Ç –æ–∫–∞–∑–∞–ª—Å—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º."
    },
    {
        "id": 9,
        "description": "–¢—ã –ø—Ä–∏—à—ë–ª(–∞) –≤ –Ω–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é, –∏ –≤—Å–µ –≥–æ–≤–æ—Ä—è—Ç –Ω–∞ —Å–≤–æ–∏—Ö –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö —à—É—Ç–∫–∞—Ö."
    },
    {
        "id": 10,
        "description": "–¢—ã –ø–æ—à—ë–ª(–∞) –≥—É–ª—è—Ç—å, –∞ –Ω–∞ —É–ª–∏—Ü–µ –≤–Ω–µ–∑–∞–ø–Ω–æ –¥–æ–∂–¥—å, –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –Ω–∞ 5%."
    },
    {
        "id": 11,
        "description": "–¢—ã —Ö–æ—Ç–µ–ª(–∞) —Å–¥–µ–ª–∞—Ç—å –∫—Ä—É—Ç–æ–µ —Å–µ–ª—Ñ–∏, –Ω–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å –∫–∞–∫ –≤ —Å—Ç–∞—Ä—ã—Ö –º–µ–º–∞—Ö."
    },
    {
        "id": 12,
        "description": "–¢—ã —Å–ª—É—á–∞–π–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª(–∞) –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞, –∏ —Ç–∞–º —Ñ–æ–Ω–æ–º –∏–≥—Ä–∞–µ—Ç —Å—Ç—Ä–∞–Ω–Ω–∞—è –º—É–∑—ã–∫–∞."
    },
    {
        "id": 13,
        "description": "–¢—ã –≤–µ—Å—å –¥–µ–Ω—å –≤ –Ω–∞—É—à–Ω–∏–∫–∞—Ö, –∞ –ø–æ—Ç–æ–º –ø–æ–Ω–∏–º–∞–µ—à—å, —á—Ç–æ –æ–Ω–∏ –Ω–µ –±—ã–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Ç–µ–ª–µ—Ñ–æ–Ω—É."
    },
    {
        "id": 14,
        "description": "–¢—ã –¥–æ–ª–≥–æ –≤—ã–±–∏—Ä–∞–ª(–∞), —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –∞ –ø–æ—Ç–æ–º –∑–∞—Å–Ω—É–ª(–∞) —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç."
    },
    {
        "id": 15,
        "description": "–¢—ã –∏–¥—ë—à—å –≤ –≥–∞—Ä–¥–µ—Ä–æ–± –∏ –≤–∏–¥–∏—à—å, —á—Ç–æ —É —Ç–µ–±—è —Å—Ç—ã—Ä–∏–ª–∏ –∫—Ä–∞—Å–æ–≤–∫–∏."
    }
]








active_games = {}

class MemeGame:
    def __init__(self, chat_id):
        self.chat_id = chat_id
        self.current_situation = None
        self.used_situations = set()
        self.message_to_reply = None
        self.memes = {}  # {user_id: {'text': meme_text, 'scores': [], 'username': username}}
        self.scores = defaultdict(int)  # {user_id: total_score}
        self.timer = None
        self.current_meme_index = 0
        self.meme_list = []
        self.voted_users = set()
        self.all_participants = set()

    def start(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –Ω–æ–≤—É—é –∏–≥—Ä—É"""
        self.send_situation()

    def send_situation(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Å–∏—Ç—É–∞—Ü–∏—é –≤ —á–∞—Ç"""
        available = [s for s in situations if s["id"] not in self.used_situations]
        
        if not available:
            self.show_final_results()
            self.end_game()
            return

        self.current_situation = random.choice(available)
        self.used_situations.add(self.current_situation["id"])
        self.memes.clear()
        self.voted_users.clear()
        self.all_participants.clear()
        
        msg = bot.send_message(
            self.chat_id,
            f"üé≤ –°–∏—Ç—É–∞—Ü–∏—è:\n{self.current_situation['description']}\n\n"
            "–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –º–µ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 —Å–µ–∫—É–Ω–¥!"
        )
        self.message_to_reply = msg.message_id
        
        self.timer = threading.Timer(15.0, self.start_voting)
        self.timer.start()

    def handle_response(self, message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if message.reply_to_message and message.reply_to_message.message_id == self.message_to_reply:
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name
            self.memes[user_id] = {'text': message.text, 'scores': [], 'username': username}
            self.all_participants.add(user_id)

    def start_voting(self):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        if not self.memes:
            bot.send_message(self.chat_id, "–ù–∏–∫—Ç–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –º–µ–º—ã! –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Ä–∞—É–Ω–¥.")
            self.send_situation()
            return

        self.meme_list = list(self.memes.items())
        self.current_meme_index = 0
        self.voted_users.clear()
        self.show_next_meme_for_voting()

    def show_next_meme_for_voting(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –º–µ–º –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏—è"""
        if self.current_meme_index >= 5:
            self.calculate_round_results()
            threading.Timer(5.0, self.send_situation).start()
            return

        user_id, meme_data = self.meme_list[self.current_meme_index]
        markup = types.InlineKeyboardMarkup()
        for i in range(1, 6):
            markup.add(types.InlineKeyboardButton(str(i), callback_data=f"rate_{user_id}_{i}"))
        
        bot.send_message(
            self.chat_id,
            f"–ú–µ–º –æ—Ç @{meme_data['username']}:\n{meme_data['text']}\n\n"
            "–û—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5 (–º–æ–≥—É—Ç –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏):",
            reply_markup=markup
        )

    def handle_rating(self, user_id, rater_id, score):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ü–µ–Ω–∫—É –º–µ–º–∞"""
        if rater_id not in self.all_participants:
            return False
        
        if (rater_id, user_id) in self.voted_users:
            return False
        
        if user_id in self.memes:
            self.memes[user_id]['scores'].append(score)
            self.voted_users.add((rater_id, user_id))
            
            if len(self.voted_users) == len(self.all_participants) * (self.current_meme_index + 1):
                self.current_meme_index += 1
                self.show_next_meme_for_voting()
            
            return True
        return False

    def calculate_round_results(self):
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—É–Ω–¥–∞"""
        results = []
        for user_id, meme_data in self.meme_list:
            if meme_data['scores']:
                avg_score = sum(meme_data['scores']) / len(meme_data['scores'])
                self.scores[user_id] += avg_score
                results.append(f"@{meme_data['username']}: {avg_score:.1f} –±–∞–ª–ª–æ–≤ (–æ—Ü–µ–Ω–∫–∏: {', '.join(map(str, meme_data['scores']))})")
        
        if results:
            bot.send_message(
                self.chat_id,
                "–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —ç—Ç–æ–≥–æ —Ä–∞—É–Ω–¥–∞:\n" + "\n".join(results)
            )

    def show_final_results(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–≥—Ä—ã"""
        if not self.scores:
            bot.send_message(self.chat_id, "–ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return

        sorted_scores = sorted(self.scores.items(), key=lambda x: x[1], reverse=True)
        result_text = "üèÜ –§–∏–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n"
        for i, (user_id, score) in enumerate(sorted_scores, 1):
            username = next((m['username'] for m in self.memes.values() if m.get('username')), "Unknown")
            result_text += f"{i}. @{username}: {score:.1f} –±–∞–ª–ª–æ–≤\n"
        
        bot.send_message(self.chat_id, result_text)

    def end_game(self):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É"""
        if self.timer:
            self.timer.cancel()
        if self.chat_id in active_games:
            del active_games[self.chat_id]

@bot.message_handler(commands=['start'])
def start(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    if message.chat.type == "private":
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É", url="https://t.me/YourBotName?startgroup=true")
        markup.add(btn)
        
        bot.reply_to(message,
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≤–µ—Å—ë–ª—ã—Ö –∏–≥—Ä –≤ –≥—Ä—É–ø–ø–∞—Ö.\n"
            "–î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –∏—Å–ø–æ–ª—å–∑—É–π /gamelist –¥–ª—è —Å–ø–∏—Å–∫–∞ –∏–≥—Ä!",
            reply_markup=markup)
    else:
        bot.reply_to(message, 
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/gamelist - —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä\n"
            "/memegame - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –º–µ–º—ã")

@bot.message_handler(commands=['help'])
def help(message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    bot.reply_to(message,
        "‚Ñπ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/gamelist - —Å–ø–∏—Å–æ–∫ –∏–≥—Ä\n"
        "/memegame - –∏–≥—Ä–∞ –≤ –º–µ–º—ã\n"
        "/stopgame - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É\n\n"
        "–î–ª—è –∞–¥–º–∏–Ω–æ–≤ –≥—Ä—É–ø–ø:\n"
        "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞")

@bot.message_handler(commands=['gamelist'])
def gamelist(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä"""
    if message.chat.type not in ["group", "supergroup"]:
        bot.reply_to(message, "–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return

    markup = types.InlineKeyboardMarkup()
    btn = types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∏–≥—Ä—É –≤ –º–µ–º—ã", callback_data="start_memegame")
    markup.add(btn)
    
    bot.reply_to(message,
        "üéÆ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–≥—Ä—ã:\n\n"
        "1. /memegame - –ò–≥—Ä–∞ –≤ –º–µ–º—ã\n"
        "   –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—Ä–∏–¥—É–º—ã–≤–∞—é—Ç –º–µ–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–∏—Ç—É–∞—Ü–∏–∏\n"
        "2. (—Å–∫–æ—Ä–æ –¥–æ–±–∞–≤–∏–º –µ—â—ë –∏–≥—Ä—ã!)",
        reply_markup=markup)

@bot.message_handler(commands=['stopgame'])
def stopgame(message):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∏–≥—Ä—É"""
    if message.chat.id in active_games:
        active_games[message.chat.id].end_game()
        bot.reply_to(message, "–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")
    else:
        bot.reply_to(message, "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä.")

@bot.message_handler(commands=['memegame'])
def start_memegame(message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ –º–µ–º—ã"""
    if message.chat.type not in ["group", "supergroup"]:
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admins = bot.get_chat_administrators(message.chat.id)
    is_admin = any(admin.user.id == message.from_user.id for admin in admins)
    
    if not is_admin:
        bot.reply_to(message, "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—ã!")
        return

    if message.chat.id in active_games:
        bot.reply_to(message, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stopgame –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
        return

    game = MemeGame(message.chat.id)
    active_games[message.chat.id] = game
    game.start()

@bot.callback_query_handler(func=lambda call: True)
def callback_handler(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–æ–∫"""
    if call.data == "start_memegame":
        start_memegame(call.message)
    elif call.data.startswith('rate_'):
        chat_id = call.message.chat.id
        if chat_id not in active_games:
            bot.answer_callback_query(call.id, "–ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            return

        _, user_id, score = call.data.split('_')
        rater_id = call.from_user.id
        success = active_games[chat_id].handle_rating(int(user_id), rater_id, int(score))
        
        if success:
            bot.answer_callback_query(call.id, f"–í—ã –ø–æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ü–µ–Ω–∫—É {score}")
        else:
            bot.answer_callback_query(call.id, "–í—ã —É–∂–µ –≥–æ–ª–æ—Å–æ–≤–∞–ª–∏ –∑–∞ —ç—Ç–æ—Ç –º–µ–º –∏–ª–∏ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ!")

@bot.message_handler(func=lambda m: True, content_types=['text'])
def handle_messages(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    if message.chat.id in active_games:
        active_games[message.chat.id].handle_response(message)

if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)